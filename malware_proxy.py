# Stage 1 of a malware filtering proxy.
# Written for CS 4480 Computer Networks with Prof. Kobus Van der Merwe
# Last edit: January 28th, 2016
# Author: Jake Pitkin
# Repository: https://github.com/jspitkin/malware_proxy_1.git

import socket
import select
import sys
from urlparse import urlparse

def main():
    serverPort = int(sys.argv[1])
    serverAddress = 'localhost'

    serverSocket = socket.socket(socket.AF_INET,socket.SOCK_STREAM)
    print 'Got a socket:', serverSocket.fileno()

    serverSocket.bind((serverAddress,serverPort))
    print 'Bound to:', serverSocket.getsockname()

    serverSocket.listen(1)

    input = [serverSocket]

    while 1:

        inputready,outputready,exceptready = select.select(input,[],[])

        for s in inputready:

            if s == serverSocket:
                print 'Handle server socket'
                connectionSocket, addr = serverSocket.accept()
                print 'Accepted connection from:', connectionSocket.getpeername()
                input.append(connectionSocket)

            else :
                requestLine = s.recv(1024)
                # Attempt to forward the request
                if requestLine == '\r\n':
                    forwardRequest()
                    s.close()
                    input.remove(s)
                # Parse request line and listen for more
                else:
                    parsedRequest = parseRequest(requestLine)
                    if badMethod(requestLine):
                        s.send('HTTP/1.1 501 Not Implemented\n')
                        s.close()
                        input.remove(s)
                    elif parsedRequest[0]:
                        s.send('HTTP/1.1 400 Bad request\n')
                        s.close()
                        input.remove(s)
                    else:
                        requestContent = requestPage(parsedRequest[1], parsedRequest[2])
                        s.send(requestContent)
                        s.close()
                        input.remove(s)

def forwardRequest():
    print 'Forwarding request'
    return

# Return:
#   1 - Method was a non-GET method
#   0 - otherwise
def badMethod(request):
    separatedRequest = request.split()
    method = separatedRequest[0]
    if method == 'HEAD' or method == 'POST' or method == 'PUT' or \
       method == 'OPTIONS' or method == 'DELETE' or method == 'TRACE' or \
       method == 'CONNECT': 
        return 1
    return 0

# Return:
#   [0] - 1 if the request is invalid, 0 otherwise
#   [1] - path
#   [2] - hostname
def parseRequest(request):
    separatedRequest = request.split()
    if separatedRequest[0] == 'Host:':
        return 0, separatedRequest[1]
    if separatedRequest[0] == 'GET':
        parsedURL = urlparse(separatedRequest[1])
        return 0, parsedURL.path, parsedURL.hostname 

# Makes a request 
def requestPage(path, host):
    request = 'GET ' + path + ' HTTP/1.0\n'
    request += 'Host: ' + host + '\n'
    request += 'Connection: close\n\n'
    remoteSocket = socket.socket(socket.AF_INET,socket.SOCK_STREAM)
    remoteSocket.connect((host,80))
    remoteSocket.send(request)
    content = remote.recv(16384)
    return content

if __name__ == "__main__":
    main()